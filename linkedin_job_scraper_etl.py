# -*- coding: utf-8 -*-
"""ETL_Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11fZtOp9gx0PRmgTvZZiutbXmLzgzs5Pd

#Importing necessary libraries for the projects
"""

#ETL pipeline

import pandas as pd
import requests
from sqlalchemy import create_engine #create connection to db

!pip install apify-client

"""#Extacting linkedin job postings data using Web-scraping with the help of apifyClient API"""

#extract
from apify_client import ApifyClient

def extract()-> dict:
  # Initialize the ApifyClient with your API token
  client = ApifyClient("apify_api_U9oFD8TQcm2gTug0KVYjb7jr51WS8F2ENbZ0")

  # Prepare the Actor input
  run_input = { #removed extra indent
        "title": "Data analyst",
        "location": "United States",
        #"companyName": ["company1", "company2" ],
        #"companyId": ["companyID" ,"companyID2"],
        "publishedAt":"r2592000", #r2592000 --> month, r604800-->week, r86400-->24hour
        "rows": 1000,
        "proxy": {
            "useApifyProxy": True,
            "apifyProxyGroups": ["RESIDENTIAL"],
        },
      }

  # Run the Actor and wait for it to finish
  run = client.actor("BHzefUZlZRKWxkTck").call(run_input=run_input)

  # Fetch and print Actor results from the run's dataset (if there are any)
  results = []
  for item in client.dataset(run["defaultDatasetId"]).iterate_items():
      results.append(item)

  return results

"""#Transformed extracted data into DataFrame"""

#Transform

def transform(data: dict)-> pd.DataFrame:
  df = pd.DataFrame(data)
  print(f'Total number of job listings from API {len(data)}')
  return df

"""#Loading the Transformed data into sqlite Database"""

#Load
def load(df: pd.DataFrame):
    # Create a sqlite engine
    engine = create_engine('sqlite:///job_posting_in_last_one_emonth.db')

    # Load the dataframe into a sqlite table
    df.to_sql('job_postings', engine, if_exists='replace', index=False)
    print("Data loaded into SQLite successfully.")

#Run ETL
if __name__ == "__main__":
  extracted_data = extract()
  transformed_data = transform(extracted_data)
  load(transformed_data)